name: Integration Tests

on:
  push:
    branches: [ main, refactoring ]
  pull_request:
    branches: [ main ]

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-xvfb pytest-timeout pytest-cov
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build test environment
      run: |
        docker compose -f docker/docker-compose.test-full.yml build test_runner
    
    - name: Start test services
      run: |
        docker compose -f docker/docker-compose.test-full.yml up -d ldap_sync_389ds ldap_sync_vaultwarden mailhog
    
    - name: Wait for services to be ready
      run: |
        # Wait for LDAP to be ready
        timeout 60 bash -c 'until docker compose -f docker/docker-compose.test-full.yml exec -T ldap_sync_389ds ldapsearch -x -H ldap://localhost:3389 -D "cn=Directory Manager" -w adminpassword -b "dc=domain,dc=local" "(objectClass=*)" dn; do sleep 2; done'
        
        # Wait for VaultWarden to be ready
        timeout 60 bash -c 'until curl -f http://localhost:8080/alive; do sleep 2; done'
    
    - name: Run unit tests
      run: |
        python -m pytest tests/unit/ -v --cov=src/vaultwarden_ldap_sync --cov-report=xml --cov-report=term-missing
    
    - name: Run integration tests
      run: |
        docker compose -f docker/docker-compose.test-full.yml run --rm test_runner
    
    - name: Run LDAP integration tests (direct)
      run: |
        # Run LDAP tests directly against local services
        LDAP_HOST=ldap://localhost:3389 python -m pytest tests/integration/test_ldap_client_fetch.py -v
    
    - name: Collect Docker logs on failure
      if: failure()
      run: |
        echo "=== LDAP Logs ==="
        docker compose -f docker/docker-compose.test-full.yml logs ldap_sync_389ds
        echo "=== VaultWarden Logs ==="
        docker compose -f docker/docker-compose.test-full.yml logs ldap_sync_vaultwarden
        echo "=== Test Runner Logs ==="
        docker compose -f docker/docker-compose.test-full.yml logs test_runner
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          coverage.xml
          .coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: integration
        name: codecov-integration-${{ matrix.python-version }}
    
    - name: Clean up
      if: always()
      run: |
        docker compose -f docker/docker-compose.test-full.yml down -v

  privilege-tests:
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test sync user privilege scenarios
      run: |
        # Start test environment
        docker compose -f docker/docker-compose.test-full.yml up -d ldap_sync_389ds ldap_sync_vaultwarden
        
        # Wait for services
        timeout 60 bash -c 'until curl -f http://localhost:8080/alive; do sleep 2; done'
        
        # Run privilege-specific tests
        python -m pytest tests/integration/test_scenarios.py::TestPrivilegeScenarios -v
        
        # Clean up
        docker compose -f docker/docker-compose.test-full.yml down -v

  multi-org-tests:
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test multi-organization scenarios
      run: |
        # Start test environment
        docker compose -f docker/docker-compose.test-full.yml up -d ldap_sync_389ds ldap_sync_vaultwarden
        
        # Wait for services
        timeout 60 bash -c 'until curl -f http://localhost:8080/alive; do sleep 2; done'
        
        # Run multi-org tests (may skip if not implemented)
        python -m pytest tests/integration/test_scenarios.py::TestMultiOrgScenarios -v || true
        
        # Clean up
        docker compose -f docker/docker-compose.test-full.yml down -v

  error-handling-tests:
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test error handling scenarios
      run: |
        # Start test environment
        docker compose -f docker/docker-compose.test-full.yml up -d ldap_sync_389ds ldap_sync_vaultwarden
        
        # Wait for services
        timeout 60 bash -c 'until curl -f http://localhost:8080/alive; do sleep 2; done'
        
        # Run error handling tests
        python -m pytest tests/integration/test_scenarios.py::TestErrorHandlingScenarios -v
        
        # Clean up
        docker compose -f docker/docker-compose.test-full.yml down -v